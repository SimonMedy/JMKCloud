security:
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    login:
      pattern: ^/apiv1/login
      stateless: true
      provider: app_user_provider
      security: true
      json_login:
        username_path: email
        password_path: password
        check_path: /apiv1/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    register:
      pattern: ^/apiv1/(register|confirm-email|confirm-registration)
      stateless: false
      security: false

    api:
      pattern: ^/apiv1
      stateless: true
      jwt: ~

    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/apiv1/login, method: [POST], roles: PUBLIC_ACCESS }
    - { path: ^/apiv1/register, roles: PUBLIC_ACCESS }
    - { path: ^/apiv1/confirm-email, roles: PUBLIC_ACCESS }
    - { path: ^/apiv1/confirm-registration, roles: PUBLIC_ACCESS }
    - { path: ^/apiv1/users, method: [GET], roles: ROLE_ADMIN }
    - { path: ^/apiv1/users/\d+, method: [GET, DELETE], roles: ROLE_ADMIN }
    - { path: ^/apiv1/users/email/\w+, method: [GET, DELETE], roles: ROLE_ADMIN }
    - { path: ^/apiv1/create-payment-intent, roles: ROLE_USER }
    - { path: ^/apiv1, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
